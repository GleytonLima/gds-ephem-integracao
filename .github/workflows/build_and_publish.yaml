name: Build and Publish

on:
  push:
    branches: [ main ]
    paths: [ '**.java', '.github/workflows/build_and_publish.yaml', 'pom.xml', 'src/main/resources/logback-spring.xml' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ARTIFACT_NAME: app.jar
  SWAGGER_ARTIFACT_NAME: swagger.json
  DOCKER_IMAGE_NAME: gleytonlima/gds-ephem-integracao

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkout badges branch to a badges directory nested inside first checkout
        uses: actions/checkout@v3
        with:
          ref: badges
          path: badges

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package

      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/*.jar
          retention-days: 1
      - name: Archive Swagger
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SWAGGER_ARTIFACT_NAME }}
          path: target/*.json
          retention-days: 7
      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true
      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '666649416+github-actions[bot]@users.noreply.github.com'
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    environment: gds-ephem-integracao
    needs: build
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Retrieve saved app.jar
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target
      - name: Display structure of downloaded files
        run: ls -R
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }} .
          docker push ${{ env.DOCKER_IMAGE_NAME }}
      - name: restart app on digital ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd gds-vbe-api/
            docker-compose stop integracaoapp
            docker-compose pull integracaoapp
            docker-compose up -d integracaoapp
